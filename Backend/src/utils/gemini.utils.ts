// javascript
import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

function calculateCalorieNeeds(data) {
  const { age, gender, height, current_weight, activity_level, fitness_goal } = data;
  const weightKg = current_weight ; // Convert lbs to kg / 2.20462
  const heightCm = height ; // Convert inches to cm * 2.54
  const rmr = gender === 'male'
    ? 10 * weightKg + 6.25 * heightCm - 5 * age + 5
    : 10 * weightKg + 6.25 * heightCm - 5 * age - 161;
  const activityMultipliers = {
    sedentary: 1.2,
    light: 1.375,
    moderate: 1.55,
    high: 1.725,
  };
  const tdee = rmr * (activityMultipliers[activity_level.toLowerCase()] || 1.55);
  return Math.round(fitness_goal === 'weight_loss' ? tdee - 500 : fitness_goal === 'muscle_gain' ? tdee + 300 : tdee);
}

async function generateFitnessPlanWithGemini(data) {
  const {
    nick_name,
    age,
    gender,
    height,
    current_weight,
    target_weight,
    fitness_goal,
    current_fitness_level,
    activity_level,
    equipments,
    workout_duration,
    workout_days_perWeek,
    health_issues,
    medical_condition,
    diet_allergies,
    diet_meals_perDay,
    diet_preferences,
  } = data;

  const calorieGoal = calculateCalorieNeeds(data);

  // Construct prompt for Gemini API
  const prompt = `
    You are an expert personal trainer and nutritionist. Create a 28-day workout and diet plan for a male user with the following details:
    - Name: ${nick_name}
    - Age: ${age}
    - Gender: ${gender}
    - Height: ${height} cm
    - Current Weight: ${current_weight} kg
    - Target Weight: ${target_weight} kg
    - Fitness Goal: ${fitness_goal}
    - Fitness Level: ${current_fitness_level}
    - Activity Level: ${activity_level}
    - Available Equipment: ${equipments.join(', ')}
    - Workout Duration: ${workout_duration} minutes per session
    - Workout Days per Week: ${workout_days_perWeek}
    - Health Issues: ${health_issues.length ? health_issues.join(', ') : 'None'}
    - Medical Conditions: ${medical_condition.length ? medical_condition.join(', ') : 'None'}
    - Dietary Allergies: ${diet_allergies.length ? diet_allergies.join(', ') : 'None'}
    - Meals per Day: ${diet_meals_perDay}
    - Dietary Preferences: ${diet_preferences}

    **Workout Plan Requirements**:
    - Create a 4-week plan with ${workout_days_perWeek} workout days per week.
    - Each session should last ${workout_duration} minutes, including warm-up (5 min) and cooldown (5 min).
    - Include strength training (2–3 days/week) and cardio (1–2 days/week), with 1 optional active recovery day.
    - Exercises must use only the specified equipment and respect health issues/medical conditions (e.g., avoid high-impact for joint issues).
    - Adjust intensity based on fitness level (beginner, intermediate, advanced).
    - Provide a weekly progression (e.g., increase reps, sets, or intensity).

    **Diet Plan Requirements**:
    - Create a 4-week diet plan with ${diet_meals_perDay} meals per day, targeting ~${calorieGoal} kcal/day.
    - Respect dietary allergies and preferences (e.g., ${diet_preferences}).
    - Include protein (~1–1.5 g/lb body weight), moderate carbs, and healthy fats.
    - Provide a sample daily meal plan for each week, with calorie estimates and simple recipes.
    - Include 1–2 cheat meals per week in weeks 3–4.

    **Output Format**:
    Return a JSON object with:
    - user: User's nickname
    - fitness_goal: User's fitness goal
    - calorie_goal: Calculated daily calorie target
    - workout_plan: Array of 4 weeks, each with an array of daily workouts (name, type, exercises with sets/reps/duration)
    - diet_plan: Array of 4 weeks, each with an array of daily meals (meal type, items, calories)

    Ensure the plan is safe, practical, and tailored to the user's profile. Avoid generic responses and focus on personalization.
  `;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: prompt,
    });

    const plan = JSON.parse(response.text); // Assumes Gemini returns JSON-formatted text

    // Validate and adjust plan
    if (!plan.workout_plan || !plan.diet_plan) {
      throw new Error("Incomplete plan generated by Gemini API");
    }

    // Ensure health constraints are respected
    if (health_issues.includes('knee') || medical_condition.includes('arthritis')) {
      plan.workout_plan.forEach((week) => {
        week.days.forEach((day) => {
          day.exercises = day.exercises.filter(
            (ex) => !ex.name.toLowerCase().includes('squat') && !ex.name.toLowerCase().includes('lunge')
          );
          if (day.type.includes('Strength')) {
            day.exercises.push({ name: 'Seated Leg Extensions', sets: 3, reps: 12 });
          }
        });
      });
    }

    // Ensure allergy-free diet
    plan.diet_plan.forEach((week) => {
      week.days.forEach((day) => {
        day.meals.forEach((meal) => {
          meal.items = meal.items.filter(
            (item) => !diet_allergies.some((allergy) => item.toLowerCase().includes(allergy.toLowerCase()))
          );
        });
      });
    });

    return plan;
  } catch (error) {
    console.error("Error generating plan with Gemini API:", error);
    // Fallback to hardcoded plan if API fails
    const fallbackPlan = {
      user: nick_name,
      fitness_goal,
      calorie_goal: calorieGoal,
      workout_plan: [
        {
          week: 1,
          days: [
            {
              day: 'Monday',
              type: 'Strength (Lower)',
              exercises: [
                { name: 'Bodyweight Squats', sets: 3, reps: 12 },
                { name: 'Glute Bridges', sets: 3, reps: 15 },
                { name: 'Plank', sets: 3, duration: '20s' },
              ],
            },
            {
              day: 'Wednesday',
              type: 'Cardio',
              exercises: [{ name: 'Brisk Walking', duration: '30 min', intensity: 'Moderate' }],
            },
            {
              day: 'Friday',
              type: 'Strength (Upper)',
              exercises: [
                { name: 'Push-ups', sets: 3, reps: 8 },
                { name: 'Dumbbell Rows', sets: 3, reps: 12 },
                { name: 'Bicycle Crunches', sets: 3, reps: 15 },
              ],
            },
            {
              day: 'Sunday',
              type: 'Active Recovery',
              exercises: [{ name: 'Yoga', duration: '20 min' }],
            },
          ],
        },
        // Weeks 2–4 would follow similar structure with progression
      ],
      diet_plan: [
        {
          week: 1,
          days: [
            {
              day: 'Monday',
              meals: [
                { meal: 'Breakfast', items: ['2 scrambled eggs', '1 slice whole-grain toast', '1/2 avocado'], calories: 400 },
                { meal: 'Lunch', items: ['4 oz grilled chicken', '1 cup brown rice', '1 cup steamed veggies'], calories: 450 },
                { meal: 'Snack', items: ['1 banana', '1 tbsp peanut butter'], calories: 200 },
                { meal: 'Dinner', items: ['4 oz baked salmon', '1 medium sweet potato', '1 cup asparagus'], calories: calorieGoal - 1050 },
              ],
            },
            // Other days follow similar structure
          ],
        },
        // Weeks 2–4 would include variety and cheat meals
      ],
    };
    return fallbackPlan;
  }
}

module.exports = generateFitnessPlanWithGemini;

// ### Sample Output
// For the assumed user (John, 30, male, 180 lbs, 170 lbs target, weight loss, beginner, moderate activity, bodyweight/dumbbells, 45 min, 4 days/week, no allergies, 4 meals/day, standard diet):

// json
// {
//   "user": "John",
//   "fitness_goal": "weight_loss",
//   "calorie_goal": 2117,
//   "workout_plan": [
//     {
//       "week": 1,
//       "days": [
//         {
//           "day": "Monday",
//           "type": "Strength (Lower)",
//           "exercises": [
//             { "name": "Bodyweight Squats", "sets": 3, "reps": 12 },
//             { "name": "Glute Bridges", "sets": 3, "reps": 15 },
//             { "name": "Plank", "sets": 3, "duration": "20s" }
//           ]
//         },
//         {
//           "day": "Wednesday",
//           "type": "Cardio",
//           "exercises": [{ "name": "Brisk Walking", "duration": "30 min", "intensity": "Moderate" }]
//         },
//         {
//           "day": "Friday",
//           "type": "Strength (Upper)",
//           "exercises": [
//             { "name": "Push-ups", "sets": 3, "reps": 8 },
//             { "name": "Dumbbell Rows", "sets": 3, "reps": 12 },
//             { "name": "Bicycle Crunches", "sets": 3, "reps": 15 }
//           ]
//         },
//         {
//           "day": "Sunday",
//           "type": "Active Recovery",
//           "exercises": [{ "name": "Yoga", "duration": "20 min" }]
//         }
//       ]
//     },
//     // Weeks 2–4: Increase reps (e.g., 14 squats), duration (e.g., 40s plank), or intensity
//   ],
//   "diet_plan": [
//     {
//       "week": 1,
//       "days": [
//         {
//           "day": "Monday",
//           "meals": [
//             { "meal": "Breakfast", "items": ["2 scrambled eggs", "1 slice whole-grain toast", "1/2 avocado"], "calories": 400 },
//             { "meal": "Lunch", "items": ["4 oz grilled chicken", "1 cup brown rice", "1 cup steamed veggies"], "calories": 450 },
//             { "meal": "Snack", "items": ["1 banana", "1 tbsp peanut butter"], "calories": 200 },
//             { "meal": "Dinner", "items": ["4 oz baked salmon", "1 medium sweet potato", "1 cup asparagus"], "calories": 1067 }
//           ]
//         }
//         // Other days similar, with variety in weeks 2–4
//       ]
//     }
//   ]
// }
// ```

// ### Integration with React
// - **Component**: Use the `FitnessGoals` component (from May 21, 2025) to display the plan. Fetch the plan via an API call to a backend endpoint that runs `generateFitnessPlanWithGemini`.
// - **UI**: Render workouts in a table (similar to `ClientsTable` from May 8, 2025) and meals in a card-based layout with Tailwind CSS (per your styling preferences).
// - **Storage**: Save the plan to localStorage or Firestore (per your May 20, 2025, discussion on Mongoose schemas) for persistence.
// - **Example**:
//   ```jsx
//   import React, { useEffect, useState } from 'react';
//   import { generateFitnessPlanWithGemini } from './generateFitnessPlanWithGemini';

//   const FitnessPlan = ({ userData }) => {
//     const [plan, setPlan] = useState(null);

//     useEffect(() => {
//       async function fetchPlan() {
//         const generatedPlan = await generateFitnessPlanWithGemini(userData);
//         setPlan(generatedPlan);
//       }
//       fetchPlan();
//     }, [userData]);

//     if (!plan) return <div>Loading...</div>;

//     return (
//       <div className="p-4 dark:bg-gray-800">
//         <h2 className="text-2xl font-bold text-white">Fitness Plan for {plan.user}</h2>
//         <h3>Goal: {plan.fitness_goal}</h3>
//         <h3>Daily Calories: {plan.calorie_goal} kcal</h3>
//         {/* Render workout and diet plans in tables/cards */}
//       </div>
//     );
//   };

//   export default FitnessPlan;
//   ```

// ### Notes
// - **API Key Security**: Store the Gemini API key in `process.env.GEMINI_API_KEY` and avoid hardcoding it. Use environment variables in your Node.js backend.
// - **Error Handling**: The code includes a fallback plan if the API fails, ensuring robustness.
// - **Customization**: The Gemini prompt is detailed to ensure personalized output. Adjust the prompt for specific needs (e.g., more detailed recipes, advanced exercises).
// - **Health Safety**: The plan respects `health_issues` and `medical_condition` by filtering out contraindicated exercises (e.g., no squats for knee issues).
// - **Progress Tracking**: Encourage users to log progress weekly (e.g., weight, reps) via your app’s UI.
// - **Cost Management**: Monitor API usage in Google Cloud Console to stay within the free tier. If scaling, consider Google AI Pro/Ultra plans (details at https://gemini.google.com) for higher limits.

// ### Sample Plan for a Gemini Man
// For John (30, male, weight loss, beginner):
// - **Workout (Week 1)**:
//   - **Monday (Strength)**: 5 min warm-up, 3x12 squats, 3x15 glute bridges, 3x20s plank, 5 min cooldown.
//   - **Wednesday (Cardio)**: 30 min brisk walking (65–75% max heart rate).
//   - **Friday (Strength)**: 3x8 push-ups, 3x12 dumbbell rows, 3x15 bicycle crunches.
//   - **Sunday (Recovery)**: 20 min yoga.
//   - **Progression**: Week 2: +2 reps; Week 3: Add lunges; Week 4: 40s plank.
// - **Diet (Week 1, ~2117 kcal/day)**:
//   - **Breakfast**: 2 eggs, toast, avocado (400 kcal).
//   - **Lunch**: Grilled chicken, brown rice, veggies (450 kcal).
//   - **Snack**: Banana, peanut butter (200 kcal).
//   - **Dinner**: Salmon, sweet potato, asparagus (~1067 kcal).
//   - **Weeks 3–4**: Add cheat meal (e.g., pizza) on Saturday.

// ### References
// - Muscle & Fitness 28-day plan for structure inspiration.[](https://www.muscleandfitness.com/nutrition/healthy-eating/28-days-meal-plan-lean-muscle/)
// - Gemini API for personalized recommendations.,,,[](https://github.com/m-rishab/Diet-and-workout-Recommendation-using-Google-Gemini-pro)[](https://www.theunwindai.com/p/build-a-personal-health-and-fitness-ai-agent-using-google-gemini)[](https://ai.google.dev/competition/projects/gemini-powered-workout-tracking-app)

// If you provide specific `data` values or need further tweaks (e.g., vegetarian diet, advanced workouts), I can refine the plan. Let me know!